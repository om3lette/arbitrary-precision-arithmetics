#include <limits>

#include "LongArithm.hpp"
#include "Tester.hpp"
#include "utils.hpp"

using namespace LongArithm;
using namespace test;

int main(void) {
	// TODO: Current precision loss when reading from float on
	// conversion example 0.25000000000000000001_longnum ==
	// 0.25000000000000000000_longnum => true Happens on 19th digit after
	// decimal point

	bool success = true;

	// -------------------------------------------------------------------
	test::Tester testerInt("Int->long double constructor");
	LongNumber num3_1 = LongNumber(101, 0);
	LongNumber num3_2 = LongNumber(101, 2);
	LongNumber num3_4 = LongNumber(115, 0);
	LongNumber num3_5 = LongNumber(-115, 0);
	LongNumber num3_3 = LongNumber(std::numeric_limits<int>::max(), 0);
	LongNumber num3_6 = LongNumber(std::numeric_limits<int>::min(), 0);

	testerInt.registerTest(
		isEquals(num3_1.toString(), std::string("1100101")), "No fraction (101)"
	);
	testerInt.registerTest(
		isEquals(num3_2.toString(), std::string("1100101.00")), "With precision"
	);
	testerInt.registerTest(
		isEquals(num3_4.toString(), std::string("1110011")), "Int 115"
	);
	testerInt.registerTest(
		isEquals(num3_5.toString(), std::string("-1110011")), "Int -115"
	);
	testerInt.registerTest(
		isEquals(
			num3_3.toString(), std::string("1111111111111111111111111111111")
		),
		"Int max"
	);
	testerInt.registerTest(
		isEquals(
			num3_6.toString(), std::string("-10000000000000000000000000000000")
		),
		"Int min"
	);

	success &= testerInt.runTests();

	// -------------------------------------------------------------------
	test::Tester testerDouble("Double constructor");
	// clang-format off
	testerDouble.registerTest(
		[]() { return LongNumber(0) == LongNumber(0.0L); }, "0 == 0.0L"
	);
	testerDouble.registerTest(
		isEquals(
			(101.0_longnum).toString(),
			std::string("1100101.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
		),
		"Float (double) constructor no fraction"
	);
	testerDouble.registerTest(
		isEquals(
			(101.110_longnum).toString(),
			std::string("1100101.000111000010100011110101110000101000111101011100001010010000000000000000000000000000000000000000")
		),
		"Float (double) constructor"
	);
    testerDouble.registerTest(
        isEquals(
            LongNumber(std::numeric_limits<long double>::max()).toString(),
            std::string
    	),
        "Long double max"
	);
	testerDouble.registerTest(
		isEquals(
			LongNumber(std::numeric_limits<long double>::min(), 16384).toString(),
			std::string
		),
		"Long double min"
	);
	// clang-format on
	success &= testerDouble.runTests();

	// -------------------------------------------------------------------
	test::Tester testerStr("String constructor");
	LongNumber num1 = LongNumber("1.001000000000000000000000000000001", 3);
	LongNumber num2 = LongNumber("1.001000000000000000000000000000001", 33);
	LongNumber num4 = LongNumber("00101", 0);
	LongNumber num5 = LongNumber("00101.01", 2);
	LongNumber num6_1 = LongNumber("0.01", 2);
	testerStr.registerTest(
		isEquals(num1.toString(), std::string("1.001")),
		"Fraction exceeding limit"
	);
	testerStr.registerTest(
		isEquals(
			num2.toString(), std::string("1.001000000000000000000000000000001")
		),
		"Exact fraction limit multiple chunks"
	);

	testerStr.registerTest(
		isEquals(num5.toString(), std::string("101.01")),
		"Trailing zeros in whole part"
	);
	testerStr.registerTest(
		isEquals(num4.toString(), std::string("101")),
		"No fraction with trailing zeros"
	);
	testerStr.registerTest(
		isEquals(num6_1.toString(), std::string(".01")), "Zero as whole part"
	);

	success &= testerStr.runTests();

	// -------------------------------------------------------------------
	test::Tester testerExcep("Exception tests");
	testerExcep.registerTest(
		[]() {
			LongNumber("20.1", 3);
			return true;
		},
		"Impossible digit (2) in whole part", true
	);

	testerExcep.registerTest(
		[]() {
			LongNumber("10.2", 3);
			return true;
		},
		"Impossible digit (2) in fraction part", true
	);
	testerExcep.registerTest(
		[]() {
			LongNumber("H0.1", 3);
			return true;
		},
		"Impossible digit (H) in whole part", true
	);
	testerExcep.registerTest(
		[]() {
			LongNumber("10.H", 3);
			return true;
		},
		"Impossible digit (H) in fraction part", true
	);

	success &= testerExcep.runTests();

	// -------------------------------------------------------------------
	test::Tester testerSpaceshipBasic("Comparisons one chunk int");
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(0.0L) == LongNumber(0); }, "0.0L = 0"
	);
	testerSpaceshipBasic.registerTest(
		isEquals(LongNumber(0), LongNumber(-0)), "+0 = -0"
	);
	testerSpaceshipBasic.registerTest(
		isEquals(LongNumber(1), LongNumber(1)), "1 = 1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) != LongNumber(-1); }, "1 != -1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) > LongNumber(-1); }, "1 > -1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) >= LongNumber(-1); }, "1 >= -1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) >= LongNumber(1); }, "1 >= 1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) <= LongNumber(1); }, "1 <= 1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(-10) < LongNumber(-9); }, "-10 < -9"
	);

	success &= testerSpaceshipBasic.runTests();

	// -------------------------------------------------------------------
	test::Tester testerSpaceshipAdvanced("Comparisons multiple chunks");
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<int>::max()) ==
				   LongNumber(std::numeric_limits<int>::max());
		},
		"max Int = max Int"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<int>::min()) ==
				   LongNumber(std::numeric_limits<int>::min());
		},
		"min Int = min Int"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<long double>::max()) ==
				   LongNumber(std::numeric_limits<long double>::max());
		},
		"max long double = max long double"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<long double>::min(), 16384) ==
				   LongNumber(std::numeric_limits<long double>::min(), 16384);
		},
		"min long double = min long double"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(static_cast<long double>(1ULL << 32)) <
				   LongNumber(static_cast<long double>((1ULL << 32) + 1));
		},
		"Multiple chunk whole part <"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return 0.11111111111111111112_longnum >
				   0.11111111111111111111_longnum;
		},
		"Multiple chunk frac part (smaller number contains "
		"more chunks != 0)"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return 0.25000000000000000001_longnum <
				   0.25000000000000000002_longnum;
		},
		"Multiple chunk frac part with 0 chunk in the middle"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() { return LongNumber(1.25L, 320) == LongNumber(1.25L); },
		"Equal numbers with different precision"
	);
	success &= testerSpaceshipAdvanced.runTests();

	test::Tester testerShifts("Bitwise shifts <<=, =>>");
	testerShifts.registerTest(
		isEquals(LongNumber(1.0L) <<= 1, LongNumber(2.0L)), "1 <<= 1"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1.0L) <<= 1, LongNumber(1.0L) >>= -1),
		"(1 <<= 1) == (1 >>= -1)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1.0L) >>= -1, LongNumber(1.0L) <<= 1),
		"(1 >>= -1) == (1 <<= 1)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1) <<= 31, LongNumber(1LL << 31)), "1 <<= 31"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1) >>= 1, LongNumber(0.5L)),
		"1 >>= 1 (carry to fraction)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1) <<= 33, LongNumber(1LL << 33)),
		"1 <<= 33 (carry)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1LL << 32) >>= 1, LongNumber(1LL << 31)),
		"2^32 >>= 1 (carry)"
	);
	testerShifts.registerTest(
		isEquals(
			(LongNumber(1, 31) >>= 31).toString(),
			std::string(".0000000000000000000000000000001")
		),
		"1 >>= 31"
	);

	success &= testerShifts.runTests();

	// -------------------------------------------------------------------
	test::Tester testerArithmetics("Operators +, -, *, /");
	testerArithmetics.registerTest(
		isEquals(LongNumber(0) + LongNumber(10), LongNumber(10)), "0 + x = x"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(-0) + LongNumber(10), LongNumber(10)), "-0 + x = x"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(10) + LongNumber(20), LongNumber(30)),
		"10 + 20 = 30 (basic +)"
	);
	testerArithmetics.registerTest(
		isEquals(
			LongNumber(std::numeric_limits<int>::max()) +
				LongNumber(std::numeric_limits<int>::max()) + LongNumber(2),
			LongNumber(4294967296.0L, 0)
		),
		"int_max + int_max + 2 (carry)"
	);
	testerArithmetics.registerTest(
		isEquals(0.5_longnum + 0.5_longnum, 1.0_longnum),
		"0.5 + 0.5 = 1.0 (float -> whole carry)"
	);
	testerArithmetics.registerTest(
		isEquals(-0.5_longnum + 0.5_longnum, 0.0_longnum),
		"-0.5 + 0.5 = 0 (-a + b -> b - a)"
	);
	testerArithmetics.registerTest(
		isEquals(0.5_longnum + -0.5_longnum, 0.0_longnum),
		"0.5 + -0.5 = 0 (a + (-b) -> a - b)"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(2) * LongNumber(2), LongNumber(4)), "2 * 2 = 4"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(2) * LongNumber(-2), LongNumber(-4)),
		"2 * (-2) = -4"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(-2) * LongNumber(-2), LongNumber(4)),
		"(-2) * (-2) = 4"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(0) * LongNumber(10), LongNumber(0)), "0 * x = 0"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(10) * LongNumber(0), LongNumber(0)), "x * 0 = 0"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(10.25L) * LongNumber(1), LongNumber(10.25L)),
		"x * 1 = x"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(1) * LongNumber(10.25L), LongNumber(10.25L)),
		"1 * x = x"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(0.25L) * LongNumber(0.25L), LongNumber(0.0625L)),
		"0.25 * 0.25 = 0.0625"
	);
	testerArithmetics.registerTest(
		isEquals(
			LongNumber(-0.25L, 4) * LongNumber(-0.25L, 4), LongNumber(0.0625L)
		),
		"(-0.25) * (-0.25) = 0.0625 (with precision = 4)"
	);
	testerArithmetics.registerTest(
		isEquals(
			LongNumber(0.25L, 3) * LongNumber(0.25L, 3), LongNumber(0.0625L)
		),
		"0.25 * 0.25 = 0.0 (with precision = 3, which is too little)"
	);
	testerArithmetics.registerTest(
		isEquals(LongNumber(10) * LongNumber(0.25L), LongNumber(2.5L)),
		"10 * 0.25 = 2.5 (Fraction -> whole carry)"
	);

	success &= testerArithmetics.runTests();

	// -------------------------------------------------------------------
	test::Tester testerCompoundArithmetics("Compound assignment");
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) += 3, LongNumber(5)), "2 += 3"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) += 0, LongNumber(2)), "2 += 0"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) += -2, LongNumber(0)), "2 += -2"
	);

	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) -= 3, LongNumber(-1)), "2 -= 3"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) -= 0, LongNumber(2)), "2 -= 0"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) -= -2, LongNumber(4)), "2 -= -2"
	);

	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) *= 3, LongNumber(6)), "2 *= 3"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) *= 0, LongNumber(0)), "2 *= 0"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) *= -2, LongNumber(-4)), "2 *= -2"
	);

	success &= testerCompoundArithmetics.runTests();

	if (!success) throw std::logic_error("Some tests failed!");
	std::cout << "All tests passed successfully!" << std::endl;
	return 0;
}
