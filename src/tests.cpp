#include "LongArithm.hpp"
#include "Tester.hpp"
#include "pi-utils.cpp"
#include "utils.hpp"
#include <limits>
#include <stdio.h>

using namespace LongArithm;
using namespace test;

int main(void) {
	// Precision loss when converting from long double from 19th digit after decimal point
	// E.g 0.25000000000000000001_longnum == 0.25000000000000000000_longnum
	bool success = true;

	// -------------------------------------------------------------------
	test::Tester testerInt("Int->long double constructor");

	testerInt.registerTest(
		isEquals(LongNumber(101, 0).toBinaryString(), std::string("1100101")),
		"No fraction (101)"
	);
	testerInt.registerTest(
		isEquals(
			LongNumber(101, 2).toBinaryString(), std::string("1100101.00")
		),
		"Precision = 2"
	);
	testerInt.registerTest(
		isEquals(LongNumber(115, 0).toBinaryString(), std::string("1110011")),
		"Int 115"
	);
	testerInt.registerTest(
		isEquals(LongNumber(-115, 0).toBinaryString(), std::string("-1110011")),
		"Int -115"
	);
	testerInt.registerTest(
		isEquals(
			LongNumber(std::numeric_limits<int>::max(), 0).toBinaryString(),
			std::string("1111111111111111111111111111111")
		),
		"Int max"
	);
	testerInt.registerTest(
		isEquals(
			LongNumber(std::numeric_limits<int>::min(), 0).toBinaryString(),
			std::string("-10000000000000000000000000000000")
		),
		"Int min"
	);
	testerInt.registerTest(
		isEquals(LongNumber(0, 0).toBinaryString(), std::string("0")), "Int 0"
	);

	success &= testerInt.runTests();

	// -------------------------------------------------------------------
	test::Tester testerDouble("Double constructor");
	// clang-format off
	testerDouble.registerTest(
		[]() { return LongNumber(0) == LongNumber(0.0L); }, "0 == 0.0L"
	);
	testerDouble.registerTest(
		isEquals(
			(101.0_longnum).toBinaryString(),
			std::string("1100101.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
		),
		"Float (double) constructor no fraction"
	);
	testerDouble.registerTest(
		isEquals(
			(101.110_longnum).toBinaryString(),
			std::string("1100101.000111000010100011110101110000101000111101011100001010010000000000000000000000000000000000000000")
		),
		"Float (double) constructor"
	);
    testerDouble.registerTest(
        isEquals(
            LongNumber(std::numeric_limits<long double>::max()).toBinaryString(),
            std::string
    	),
        "Long double max"
	);
	testerDouble.registerTest(
		isEquals(
			LongNumber(std::numeric_limits<long double>::min(), 16384).toBinaryString(),
			std::string(".")
		),
		"Long double min"
	);
	// clang-format on
	success &= testerDouble.runTests();

	// -------------------------------------------------------------------
	test::Tester testerStr("String constructor");
	testerStr.registerTest(
		isEquals(
			LongNumber("1.001000000000000000000000000000001", 3)
				.toBinaryString(),
			std::string("1.001")
		),
		"Fraction exceeding limit"
	);
	testerStr.registerTest(
		isEquals(
			LongNumber("1.001000000000000000000000000000001", 33)
				.toBinaryString(),
			std::string("1.001000000000000000000000000000001")
		),
		"Exact fraction limit multiple chunks"
	);

	testerStr.registerTest(
		isEquals(
			LongNumber("00101.01", 2).toBinaryString(), std::string("101.01")
		),
		"Trailing zeros in whole part"
	);
	testerStr.registerTest(
		isEquals(LongNumber("00101", 0).toBinaryString(), std::string("101")),
		"No fraction with trailing zeros"
	);
	testerStr.registerTest(
		isEquals(LongNumber("0.01", 2).toBinaryString(), std::string(".01")),
		"Zero as whole part"
	);

	success &= testerStr.runTests();

	// -------------------------------------------------------------------
	test::Tester testerSpaceshipBasic("Comparisons one chunk int");
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(0.0L) == LongNumber(0); }, "0.0L = 0"
	);
	testerSpaceshipBasic.registerTest(
		isEquals(LongNumber(0), LongNumber(-0)), "+0 = -0"
	);
	testerSpaceshipBasic.registerTest(
		isEquals(LongNumber(1), LongNumber(1)), "1 = 1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) != LongNumber(-1); }, "1 != -1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) > LongNumber(-1); }, "1 > -1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) >= LongNumber(-1); }, "1 >= -1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) >= LongNumber(1); }, "1 >= 1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(1) <= LongNumber(1); }, "1 <= 1"
	);
	testerSpaceshipBasic.registerTest(
		[]() { return LongNumber(-10) < LongNumber(-9); }, "-10 < -9"
	);

	success &= testerSpaceshipBasic.runTests();

	// -------------------------------------------------------------------
	test::Tester testerSpaceshipAdvanced("Comparisons multiple chunks");
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<int>::max()) ==
				   LongNumber(std::numeric_limits<int>::max());
		},
		"max Int = max Int"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<int>::min()) ==
				   LongNumber(std::numeric_limits<int>::min());
		},
		"min Int = min Int"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<long double>::max()) ==
				   LongNumber(std::numeric_limits<long double>::max());
		},
		"max long double = max long double"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(std::numeric_limits<long double>::min(), 16384) ==
				   LongNumber(std::numeric_limits<long double>::min(), 16384);
		},
		"min long double = min long double"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return LongNumber(static_cast<long double>(1ULL << 32)) <
				   LongNumber(static_cast<long double>((1ULL << 32) + 1));
		},
		"Multiple chunk whole part <"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return 0.11111111111111111112_longnum >
				   0.11111111111111111111_longnum;
		},
		"Multiple chunk frac part (smaller number contains "
		"more chunks != 0)"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() {
			return 0.25000000000000000001_longnum <
				   0.25000000000000000002_longnum;
		},
		"Multiple chunk frac part with 0 chunk in the middle"
	);
	testerSpaceshipAdvanced.registerTest(
		[]() { return LongNumber(1.25L, 320) == LongNumber(1.25L); },
		"Equal numbers with different precision"
	);
	success &= testerSpaceshipAdvanced.runTests();

	test::Tester testerShifts("Bitwise shifts <<=, =>>");
	testerShifts.registerTest(
		isEquals(LongNumber(1.0L) <<= 1, LongNumber(2.0L)), "1 <<= 1"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1.0L) <<= 1, LongNumber(1.0L) >>= -1),
		"(1 <<= 1) == (1 >>= -1)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1.0L) >>= -1, LongNumber(1.0L) <<= 1),
		"(1 >>= -1) == (1 <<= 1)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1) <<= 31, LongNumber(1LL << 31)), "1 <<= 31"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1) >>= 1, LongNumber(0.5L)),
		"1 >>= 1 (carry to fraction)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1) <<= 33, LongNumber(1LL << 33)),
		"1 <<= 33 (carry)"
	);
	testerShifts.registerTest(
		isEquals(LongNumber(1LL << 32) >>= 1, LongNumber(1LL << 31)),
		"2^32 >>= 1 (carry)"
	);
	testerShifts.registerTest(
		isEquals(
			(LongNumber(1, 31) >>= 31).toBinaryString(),
			std::string(".0000000000000000000000000000001")
		),
		"1 >>= 31"
	);

	success &= testerShifts.runTests();

	// -------------------------------------------------------------------
	test::Tester testerAddition("Operators +, -");
	testerAddition.registerTest(
		isEquals(LongNumber(0) + LongNumber(10), LongNumber(10)), "0 + x = x"
	);
	testerAddition.registerTest(
		isEquals(LongNumber(-0) + LongNumber(10), LongNumber(10)), "-0 + x = x"
	);
	testerAddition.registerTest(
		isEquals(LongNumber(10) + LongNumber(20), LongNumber(30)),
		"10 + 20 = 30 (basic +)"
	);
	testerAddition.registerTest(
		isEquals(
			LongNumber(std::numeric_limits<int>::max()) +
				LongNumber(std::numeric_limits<int>::max()) + LongNumber(2),
			LongNumber(4294967296.0L, 0)
		),
		"int_max + int_max + 2 (carry)"
	);
	testerAddition.registerTest(
		isEquals(0.5_longnum + 0.5_longnum, 1.0_longnum),
		"0.5 + 0.5 = 1.0 (float -> whole carry)"
	);
	testerAddition.registerTest(
		isEquals(-0.5_longnum + 0.5_longnum, 0.0_longnum),
		"-0.5 + 0.5 = 0 (-a + b -> b - a)"
	);
	testerAddition.registerTest(
		isEquals(0.5_longnum + -0.5_longnum, 0.0_longnum),
		"0.5 + -0.5 = 0 (a + (-b) -> a - b)"
	);
	testerAddition.registerTest(
		isEquals(2.0_longnum - 2.0_longnum, 0.0_longnum), "x - x = 0"
	);
	testerAddition.registerTest(
		isEquals(2.0_longnum - 0.0_longnum, 2.0_longnum), "x - 0 = x"
	);
	testerAddition.registerTest(
		isEquals(LongNumber("10.01") - LongNumber(2, 0), 0.25_longnum),
		"2.25 - 2 = 0.25 (different precision)"
	);
	testerAddition.registerTest(
		isEquals(LongNumber("10.01") + LongNumber(2, 0), 4.25_longnum),
		"2.25 + 2 = 4.25 (different precision)"
	);

	success &= testerAddition.runTests();

	// -------------------------------------------------------------------
	test::Tester testerMultiplication("Operator *");

	testerMultiplication.registerTest(
		isEquals(LongNumber(2) * LongNumber(2), LongNumber(4)), "2 * 2 = 4"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(2) * LongNumber(-2), LongNumber(-4)),
		"2 * (-2) = -4"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(-2) * LongNumber(-2), LongNumber(4)),
		"(-2) * (-2) = 4"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(0) * LongNumber(10), LongNumber(0)), "0 * x = 0"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(10) * LongNumber(0), LongNumber(0)), "x * 0 = 0"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(10.25L) * LongNumber(1), LongNumber(10.25L)),
		"x * 1 = x"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(1) * LongNumber(10.25L), LongNumber(10.25L)),
		"1 * x = x"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(0.25L) * LongNumber(0.25L), LongNumber(0.0625L)),
		"0.25 * 0.25 = 0.0625"
	);
	testerMultiplication.registerTest(
		isEquals(
			LongNumber(-0.25L, 4) * LongNumber(-0.25L, 4), LongNumber(0.0625L)
		),
		"(-0.25) * (-0.25) = 0.0625 (precision = 4)"
	);
	testerMultiplication.registerTest(
		[]() {
			return (LongNumber(0.25L, 3) * LongNumber(0.25L, 3)) ==
				   LongNumber(0.0L);
		},
		"0.25 * 0.25 = 0.0 (precision = 3, which is too little)"
	);
	testerMultiplication.registerTest(
		isEquals(LongNumber(10) * LongNumber(0.25L), LongNumber(2.5L)),
		"10 * 0.25 = 2.5 (Fraction -> whole carry)"
	);
	testerAddition.registerTest(
		isEquals(LongNumber("10.01") + LongNumber(2, 0), 4.25_longnum),
		"2.25 * 2 = 5.5 (different precision)"
	);

	success &= testerMultiplication.runTests();

	// -------------------------------------------------------------------
	test::Tester testerDivision("Operator /");
	testerDivision.registerTest(
		isEquals(LongNumber(4) / LongNumber(2), LongNumber(2)), "4 / 2 = 2"
	);
	testerDivision.registerTest(
		isEquals(LongNumber(32) / LongNumber(1), LongNumber(32)), "x / 1 = x"
	);
	testerDivision.registerTest(
		isEquals(LongNumber(32) / LongNumber(-1), LongNumber(-32)),
		"x / (-1) = x"
	);
	testerDivision.registerTest(
		isEquals(LongNumber(5) / LongNumber(2), LongNumber(2.5L)), "5 / 2"
	);
	testerDivision.registerTest(
		isEquals(LongNumber(4) / 2, LongNumber(2)), "4 / 2 = 2"
	);
	testerDivision.registerTest(
		isEquals(LongNumber(4) / 0.5, LongNumber(8)), "4 / 0.5 = 8"
	);
	testerDivision.registerTest(
		isEquals(
			(LongNumber(22, 32) / LongNumber(7, 32)).toBinaryString(),
			std::string("11.00100100100100100100100100100100")
		),
		"22 / 7 (32 bits precision)"
	);
	testerDivision.registerTest(
		isEquals(LongNumber(10.0L, 0) / LongNumber(5.0L, 0), LongNumber(2)),
		"10 / 5 = 2 (0 bits precision. Int division)"
	);
	success &= testerDivision.runTests();

	// -------------------------------------------------------------------
	test::Tester testerCompoundArithmetics("Compound assignment");
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) += 3, LongNumber(5)), "2 += 3"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) += 0, LongNumber(2)), "2 += 0"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) += -2, LongNumber(0)), "2 += -2"
	);

	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) -= 3, LongNumber(-1)), "2 -= 3"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) -= 0, LongNumber(2)), "2 -= 0"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) -= -2, LongNumber(4)), "2 -= -2"
	);

	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) *= 3, LongNumber(6)), "2 *= 3"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) *= 0, LongNumber(0)), "2 *= 0"
	);
	testerCompoundArithmetics.registerTest(
		isEquals(LongNumber(2) *= -2, LongNumber(-4)), "2 *= -2"
	);

	success &= testerCompoundArithmetics.runTests();

	// -------------------------------------------------------------------
	test::Tester testerExcep("Exceptions");
	testerExcep.registerTest(
		[]() {
			LongNumber("20.1", 3);
			return true;
		},
		"Impossible digit (2) in whole part", true
	);
	testerExcep.registerTest(
		[]() {
			LongNumber("10.2", 3);
			return true;
		},
		"Impossible digit (2) in fraction part", true
	);
	testerExcep.registerTest(
		[]() {
			LongNumber("H0.1", 3);
			return true;
		},
		"Impossible digit (H) in whole part", true
	);
	testerExcep.registerTest(
		[]() {
			LongNumber("10.H", 3);
			return true;
		},
		"Impossible digit (H) in fraction part", true
	);
	testerExcep.registerTest(
		[]() {
			LongNumber(32) / 0;
			return true;
		},
		"x / 0 = Error", true
	);
	testerExcep.registerTest(
		[]() {
			LongNumber(-5).sqrt();
			return true;
		},
		"sqrt(-5) = Error", true
	);

	success &= testerExcep.runTests();

	// -------------------------------------------------------------------
	test::Tester testerAssignment("Copy tests");
	testerAssignment.registerTest(
		[]() {
			LongNumber x = LongNumber(10.0L);
			LongNumber test(x);
			return test == x;
		},
		"10.0 copy"
	);
	testerAssignment.registerTest(
		[]() {
			LongNumber x = LongNumber(-10.0L);
			LongNumber test(x);
			return test == x;
		},
		"-10.0 copy"
	);
	testerAssignment.registerTest(
		[]() {
			LongNumber x = LongNumber(0.0L);
			LongNumber test(x);
			return test == x;
		},
		"0.0 copy"
	);
	testerAssignment.registerTest(
		[]() {
			LongNumber x = LongNumber(std::numeric_limits<long double>::min());
			LongNumber test(x);
			return test == x;
		},
		"long double min copy (multiple chunks)"
	);

	success &= testerAssignment.runTests();

	// -------------------------------------------------------------------
	test::Tester testerPrecision("Precision");
	testerPrecision.registerTest(
		[]() {
			LongNumber x(0.5L);
			x.setPrecision(1);
			return x.toBinaryString() == ".1";
		},
		"Lower precision"
	);
	testerPrecision.registerTest(
		[]() {
			LongNumber x(0.625L);
			x.setPrecision(1);
			return x.toBinaryString() == ".1";
		},
		"Lower precision (overwriting value)"
	);
	testerPrecision.registerTest(
		[]() {
			LongNumber x(0.5L);
			x.setPrecision(1);
			LongNumber y(0.625L);
			y.setPrecision(1);
			return x == y;
		},
		"Numbers should be equal after precision drop"
	);
	testerPrecision.registerTest(
		[]() {
			LongNumber x(0.5L, 1);
			x.setPrecision(3);
			return x.toBinaryString() == ".100";
		},
		"Raise precision"
	);
	testerPrecision.registerTest(
		isEquals(
			LongNumber(0.5L).withPrecision(1).toBinaryString(),
			std::string(".1")
		),
		"Lower precision | withPrecision"
	);
	testerPrecision.registerTest(
		isEquals(
			LongNumber(0.625L, 1).withPrecision(1).toBinaryString(),
			std::string(".1")
		),
		"Lower precision (overwriting value) | withPrecision"
	);
	testerPrecision.registerTest(
		isEquals(
			LongNumber(0.5L, 1).withPrecision(3).toBinaryString(),
			std::string(".100")
		),
		"Numbers should be equal after precision drop | withPrecision"
	);
	testerPrecision.registerTest(
		isEquals(LongNumber(0.5L, 32).withPrecision(96), LongNumber(0.5L)),
		"Raise precision | withPrecision"
	);

	success &= testerPrecision.runTests();

	// -------------------------------------------------------------------
	test::Tester testerPow("Pow");
	testerPow.registerTest(
		isEquals(LongNumber(2, 0).pow(10), LongNumber(1024, 0)),
		"2^10 = 512 (even power)"
	);
	testerPow.registerTest(
		isEquals(LongNumber(2, 0).pow(9), LongNumber(512, 0)),
		"2^9 = 512 (odd power)"
	);
	// clang-format off
	testerPow.registerTest(
		isEquals(LongNumber(2, 0).pow(50).toBinaryString(), std::string("100000000000000000000000000000000000000000000000000")),
		"2^50 (exceeding one chunk)"
	);
	// clang-format on
	testerPow.registerTest(
		isEquals(LongNumber(0.5).pow(4), LongNumber(0.0625)),
		"0.5 ^ 4 = 0.0625 (fraction)"
	);

	success &= testerPow.runTests();

	// -------------------------------------------------------------------
	test::Tester testerSqrt("Square root");
	testerSqrt.registerTest(
		isEquals(LongNumber(4, 0).sqrt(), LongNumber(2)), "sqrt(4) = 2"
	);
	// clang-format off
	testerSqrt.registerTest(
		isEquals(
			LongNumber("100000000000000000000000000000000000000000000000000").sqrt(),
			LongNumber("10000000000000000000000000")
		),
		"sqrt(2 ^ 50) = 2 ^ 25 (multiple chunks)"
	);
	// clang-format on
	testerSqrt.registerTest(
		isEquals(LongNumber(0.25).sqrt(), LongNumber(0.5)),
		"sqrt(0.5 ^ 2) = 0.5"
	);

	success &= testerSqrt.runTests();

	// -------------------------------------------------------------------
	test::Tester testerToString("Decimal string output");
	testerToString.registerTest(
		isEquals((10.625_longnum).toString(), std::string("10.625")), "10.625"
	);
	testerToString.registerTest(
		isEquals((-10.625_longnum).toString(), std::string("-10.625")),
		"-10.625"
	);
	testerToString.registerTest(
		isEquals(
			LongNumber("10000000000000000000000000000000000000000").toString(),
			std::string("1099511627776")
		),
		"2 ^ 40 (multiple chunks)"
	);
	testerToString.registerTest(
		isEquals(
			LongNumber(-0.0009765625L).toString(), std::string("-.00097656")
		),
		"2 ^ (-10)"
	);
	testerToString.registerTest(
		isEquals(
			LongNumber(-0.0009765625L).toString(10), std::string("-.0009765625")
		),
		"2 ^ (-10) with 10 digits after decimal"
	);
	testerToString.registerTest(
		isEquals(
			LongNumber(
				"100000000000000000000000000000000000000000000000000.01", 32
			)
				.toString(),
			std::string("1125899906842624.25")
		),
		"2 ^ (50) + 0.25"
	);
	success &= testerToString.runTests();

	// -------------------------------------------------------------------
	// Reference Pi taken from https://www.piday.org/million/
	test::Tester testerPi("Pi");
	// clang-format off
	testerPi.registerTest(isEquals(
			calculatePi(decimalToBinaryPrecision(100)).toString(100),
			std::string("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679")
		),
		"100 digits of pi"
	);
	testerPi.registerTest(isEquals(
			calculatePi(decimalToBinaryPrecision(1000)).toString(1000),
			std::string("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989")
		),
		"1000 digits of pi"
	);
	// clang-format on

	success &= testerPi.runTests();

	if (!success) throw std::logic_error("\033[1;31mSOME TESTS FAILED!\033[0m");
	std::cout << "\033[1;32m\nALL TESTS PASSED SUCCESSFULLY!\033[0m\n"
			  << std::endl;
	return 0;
}
